<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dao.FoodMapper">

	<resultMap id="BaseResultMap" type="com.entity.Food" >
	  <id column="foodId" property="foodId" jdbcType="INTEGER" />
	  <result column="name" property="name" jdbcType="VARCHAR" />
	  <result column="imgUrl" property="imgUrl" jdbcType="VARCHAR" />
	  <result column="material" property="material" jdbcType="VARCHAR" />
	  <result column="desc" property="desc" jdbcType="VARCHAR" />
	  <result column="markCount" property="markCount" jdbcType="INTEGER" />
	  <result column="visitCount" property="visitCount" jdbcType="INTEGER" />
	  <result column="categoryId" property="categoryId" jdbcType="INTEGER" />
	  <result column="price" property="price" jdbcType="INTEGER" />
	</resultMap>
	
	<select id="queryByKeyword" resultType="com.entity.Food" parameterType="java.lang.String" >
		select *, cname as category
		from foods as A
		natural join categories as B
		where A.categoryId = B.cid
		and name like CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
	</select>
	
	<select id="queryByFoodId" resultType="com.entity.Food" parameterType="java.lang.Integer" >
		select *, cname as category
		from foods as A
		natural join categories as B
		where A.categoryId = B.cid
		and foodId = #{foodId,jdbcType=INTEGER}
	</select>
	
	<select id="addVisitCount" parameterType="java.lang.Integer" >
		update foods
		set visitCount=visitCount+1
		where foodId = #{foodId,jdbcType=INTEGER}
	</select>
	
	<select id="addMarkCount" parameterType="java.lang.Integer" >
		update foods
		set markCount=markCount+1
		where foodId = #{foodId,jdbcType=INTEGER}
	</select>
	
	<select id="decMarkCount" parameterType="java.lang.Integer" >
		update foods
		set markCount=markCount-1
		where foodId = #{foodId,jdbcType=INTEGER}
	</select>
	
	<select id="insertMarks" parameterType="java.util.Map" >
		insert into marks (foodId, userId, createTime)
		values (
		#{foodId,jdbcType=INTEGER},
		#{userId,jdbcType=INTEGER},
		#{createTime,jdbcType=TIMESTAMP})
	</select>
	
	<select id="removeMarks" parameterType="java.util.Map" >
		delete from marks
		where foodId = #{foodId,jdbcType=INTEGER}
		and userId = #{userId,jdbcType=INTEGER}
	</select>
	
	<select id="ifExistMarks" resultType="java.lang.Integer" parameterType="java.util.Map" >
		select count(*) from marks
		where foodId = #{foodId,jdbcType=INTEGER}
		and userId = #{userId,jdbcType=INTEGER}
	</select>

	<select id="getMyMarksList" resultType="com.entity.Food" parameterType="java.lang.Integer" >
		select * from marks as A
		natural join foods as B
		where A.foodId = B.foodId
		and A.userId = #{userId,jdbcType=INTEGER};
	</select>
	
	<select id="getAllCategories" resultType="com.entity.Category">
		select * from categories
	</select>
	
	<select id="queryHotFoods" resultType="java.util.Map">
		select * from foods as A
		natural join categories as B
		where A.categoryId = B.cid
		order by A.visitCount desc
		limit 0,3
	</select>
	
	<select id="queryPlanByFoodId" resultType="java.util.Map" parameterType="java.lang.Integer">
		SELECT planId, day, pid, pname, foodId FROM plans as A
		natural join period as B
		where A.pid = B.pid
		and foodId = #{foodId,jdbcType=INTEGER}
		order by A.day, B.pid asc
	</select>
</mapper>